<pre>
  ELIP: 1
  Title: ELIP Purpose and Guidelines
  Author: Andrew Poelstra <apoelstra@blockstream.com>
  Status: Active
  Type: Process
  Created: 2022-10-06
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:ELIP-0001
  License: BSD-2-Clause
           GNU-All-Permissive
</pre>

This document is almost entirely a copy of [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki Bitcoin BIP 2], with Bitcoin replaced by Elements where appropriate, as well as removing references to the mailing list.

==Abstract==

A Elements Improvement Proposal (ELIP) is a design document providing information to the Elements community, or describing a new feature for Elements or its processes or environment. The ELIP should provide a concise technical specification of the feature and a rationale for the feature.

We intend ELIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Elements. The ELIP author is responsible for building consensus within the community and documenting dissenting opinions.

Because the ELIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

==Copyright==

This ELIP is dual-licensed under the Open Publication License and BSD 2-clause license.

==ELIP workflow==

The ELIP process begins with a new idea for Elements. Each potential ELIP must have a champion -- someone who writes the ELIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The ELIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is ELIP-able.
Small enhancements or patches to a particular piece of software often don't require standardisation between multiple projects; these don't need a ELIP and should be injected into the relevant project-specific development workflow with a patch submission to the applicable issue tracker.
Additionally, many ideas have been brought forward for changing Elements that have been rejected for various reasons.

Vetting an idea publicly before going as far as writing a ELIP is meant to save both the potential author and the wider community time.
Asking the Elements community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick).
It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Elements is used.

Following a discussion, the proposal should be submitted to the [https://github.com/ElementsProject/elips ELIPs git repository] as a pull request.
This draft must be written in ELIP style as described below, and named with an alias such as "bip-johndoe-infinitebitcoins" until an editor has assigned it a ELIP number (authors MUST NOT self-assign ELIP numbers).

ELIP authors are responsible for collecting community feedback on both the initial idea and the ELIP before submitting it for review. However, wherever possible, long open-ended discussions on public mailing lists should be avoided. Strategies to keep the discussions efficient include: setting up a separate SIG mailing list for the topic, having the ELIP author accept private comments in the early design phases, setting up a wiki page or git repository, etc. ELIP authors should use their discretion here.

It is highly recommended that a single ELIP contain a single key proposal or new idea. The more focused the ELIP, the more successful it tends to be. If in doubt, split your ELIP into several well-focused ones.

When the ELIP draft is complete, a ELIP editor will assign the ELIP a number, label it as Standards Track, Informational, or Process, and merge the pull request to the ELIPs git repository.
The ELIP editors will not unreasonably reject a ELIP.
Reasons for rejecting ELIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Elements philosophy.
For a ELIP to be accepted it must meet certain minimum criteria.
It must be a clear and complete description of the proposed enhancement.
The enhancement must represent a net improvement.
The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

The ELIP author may update the draft as necessary in the git repository. Updates to drafts should also be submitted by the author as pull requests.

===Transferring ELIP Ownership===

It occasionally becomes necessary to transfer ownership of ELIPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred ELIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the ELIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the ELIP. We try to build consensus around a ELIP, but if that's not possible, you can always submit a competing ELIP.

If you are interested in assuming ownership of a ELIP, send a message asking to take over, addressed to both the original author and the ELIP editors. If the original author doesn't respond to email in a timely manner, the ELIP editors will make a unilateral decision (it's not like such decisions can't be reversed :).

===ELIP Editors===

The current ELIP editors are:

* Andrew Poelstra ([[mailto:apoelstra@blockstream.com|apoelstra@blockstream.com]])
* Andrea Bonel ([[mailto:abonel@blockstream.com|abonel@blockstream.com]])

===ELIP Editor Responsibilities & Workflow===

For each new ELIP that comes in an editor does the following:

* Read the ELIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* Motivation and backward compatibility (when applicable) must be addressed.
* The defined Layer header must be correctly assigned for the given specification.
* Licensing terms must be acceptable for ELIPs.

If the ELIP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the ELIP is ready for the repository it should be submitted as a "pull request" to the [https://github.com/ElementsProject/ELIPs ELIPs git repository] where it may get further feedback.

The ELIP editor will:

* Assign a ELIP number in the pull request.

* Merge the pull request when it is ready.

* List the ELIP in [[README.mediawiki]]

The ELIP editors are intended to fulfill administrative and editorial responsibilities. The ELIP editors monitor ELIP changes, and update ELIP headers as appropriate.

==ELIP format and structure==

===Specification===

ELIPs should be written in mediawiki format.

Each ELIP should have the following parts:

* Preamble -- Headers containing metadata about the ELIP ([[#ELIP header preamble|see below]]).

* Abstract -- A short (~200 word) description of the technical issue being addressed.

* Copyright -- The ELIP must be explicitly licensed under acceptable copyright terms ([[#ELIP licensing|see below]]).

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Elements platforms.

* Motivation -- The motivation is critical for ELIPs that want to change the Elements protocol. It should clearly explain why the existing protocol is inadequate to address the problem that the ELIP solves.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards compatibility -- All ELIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The ELIP must explain how the author proposes to deal with these incompatibilities.

* Reference implementation -- The reference implementation must be completed before any ELIP is given status "Final", but it need not be completed before the ELIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for the Elements protocol.

====ELIP header preamble====

Each ELIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  ELIP: <ELIP number, or "?" before being assigned>
* Layer: <Consensus (soft fork) | Consensus (hard fork) | Peer Services | API/RPC | Applications>
  Title: <ELIP title; maximum 44 characters>
  Author: <list of authors' real names and email addrs>
* Discussions-To: <email address>
* Comments-Summary: <summary tone>
  Comments-URI: <links to wiki page for comments>
  Status: <Draft | Active | Proposed | Deferred | Rejected |
           Withdrawn | Final | Replaced | Obsolete>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
  License: <abbreviation for approved license(s)>
* License-Code: <abbreviation for code under different approved license(s)>
* Post-History: <dates of postings to any mailing list, or link to thread in mailing list archive>
* Requires: <ELIP number(s)>
* Replaces: <ELIP number>
* Superseded-By: <ELIP number>
</pre>

The Layer header (only for Standards Track ELIPs) documents which layer of Elements the ELIP applies to.
See [[bip-0123.mediawiki|BIP 123]] for definitions of the various ELIP layers, which are identical for BIPs and ELIPs.

The Author header lists the names and email addresses of all the authors/owners of the ELIP.
The format of the Author header value must be

  Random J. User <address@dom.ain>

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

While a ELIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the ELIP is being discussed. No Discussions-To header is necessary if the ELIP is being discussed privately with the author, or on any email mailing lists.

The Type header specifies the type of ELIP: Standards Track, Informational, or Process.

The Created header records the date that the ELIP was assigned a number, while Post-History is used to record when new versions of the ELIP are posted to any mailing lists.
Dates should be in yyyy-mm-dd format, e.g. 2001-08-14.
Post-History is permitted to be a link to a specific thread in a mailing list archive.

ELIPs may have a Requires header, indicating the ELIP numbers that this ELIP depends on.

ELIPs may also have a Superseded-By header indicating that a ELIP has been rendered obsolete by a later document; the value is the number of the ELIP that replaces the current document. The newer ELIP must have a Replaces header containing the number of the ELIP that it rendered obsolete.

====Auxiliary Files====

ELIPs may include auxiliary files such as diagrams. Auxiliary files should be included in a subdirectory for that ELIP, or must be named ELIP-XXXX-Y.ext, where "XXXX" is the ELIP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==ELIP types==

There are three kinds of ELIP:

* A Standards Track ELIP describes any change that affects most or all Bitcoin implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Bitcoin. Standards Track ELIPs consist of two parts, a design document and a reference implementation.
* An Informational ELIP describes a Bitcoin design issue, or provides general guidelines or information to the Bitcoin community, but does not propose a new feature. Informational ELIPs do not necessarily represent a Bitcoin community consensus or recommendation, so users and implementors are free to ignore Informational ELIPs or follow their advice.
* A Process ELIP describes a process surrounding Bitcoin, or proposes a change to (or an event in) a process. Process ELIPs are like Standards Track ELIPs but apply to areas other than the Bitcoin protocol itself. They may propose an implementation, but not to Bitcoin's codebase; they often require community consensus; unlike Informational ELIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Bitcoin development. Any meta-ELIP is also considered a Process ELIP.

==ELIP status field==

===Specification===

The typical paths of the status of ELIPs are as follows:

<img src="bip-0002/process.png"></img>

Champions of a ELIP may decide on their own to change the status between Draft, Deferred, or Withdrawn.
A ELIP editor may also change the status to Deferred when no progress is being made on the ELIP.

A ELIP may only change status from Draft (or Rejected) to Proposed, when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to the Final status.

ELIPs should be changed from Draft or Proposed status, to Rejected status, upon request by any person, if they have not made progress in three years. Such a ELIP may be changed to Draft status if the champion provides revisions that meaningfully address public criticism of the proposal, or to Proposed status if it meets the criteria required as described in the previous paragraph.

A Proposed ELIP may progress to Final only when specific criteria reflecting real-world adoption has occurred. This is different for each ELIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be objectively verifiable, and/or be discussed on the development mailing list.

When a Final ELIP is no longer relevant, its status may be changed to Replaced or Obsolete (which is equivalent to Replaced). This change must also be objectively verifiable and/or discussed.

A process ELIP may change status from Draft to Active when it achieves rough consensus on this repository. Such a proposal is said to have rough consensus if it has been open to discussion on this repository for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances.

====Progression to Final status====

A soft-fork ELIP strictly requires a clear miner majority expressed by blockchain voting (eg, using ELIP 9). In addition, if the economy seems willing to make a "no confidence" hard-fork (such as a change in proof-of-work algorithm), the soft-fork does not become Final for as long as such a hard-fork might have majority support, or at most three months. Soft-fork ELIPs may also set additional requirements for their adoption. Because of the possibility of changes to miner dynamics, especially in light of delegated voting (mining pools), it is highly recommended that a supermajority vote around 95% be required by the ELIP itself, unless rationale is given for a lower threshold.

A hard-fork ELIP will require adoption from the entire economy surrounding any chain that implements it. Acceptance into this repository does not consitute approval or consent from anybody, nor does it guarantee implementation on any specific chain.

Peer services ELIPs should be observed to be adopted by at least 1% of public listening nodes for one month.

API/RPC and application layer ELIPs must be implemented by at least two independent and compatible software applications.

Software authors are encouraged to publish summaries of what ELIPs their software supports to aid in verification of status changes. Good examples of this at the time of writing this ELIP, can be observed in [https://github.com/bitcoin/bitcoin/blob/master/doc/bips.md Bitcoin Core's doc/bips.md file] as well as [https://github.com/bitcoin-wallet/bitcoin-wallet/blob/master/wallet/README.specs.md Bitcoin Wallet for Android's wallet/README.specs.md file].

These criteria are considered objective ways to observe the de facto adoption of the ELIP, and are not to be used as reasons to oppose or reject a ELIP. Should a ELIP become actually and unambiguously adopted despite not meeting the criteria outlined here, it should still be updated to Final status.

===Rationale===

While Elements is not a single blockchain like Bitcoin, has a smaller set of stakeholders, and any specific implementation may have a small closed set of block creators (who have the technical ability to implement a softfork with no agreement except among themselves), for the sake of consistency and transparency throughout the Elements community, it is good to have a common set of standards.

This includes consensus-layer changes such as soft-forks, which may be relevant only to validators of specific Elements chains, as well as issues such as address types, which are relevant to wallet authors and may be relevant across all Elements chains.

==ELIP comments==

===Specification===

Each ELIP should, in its preamble, link to a public wiki page with a summary tone of the comments on that page.
Reviewers of the ELIP who consider themselves qualified, should post their own comments on this wiki page.
The comments page should generally only be used to post final comments for a completed ELIP.
If a ELIP is not yet completed, reviewers should instead post on the applicable development mailing list thread to allow the ELIP author(s) to address any concerns or problems pointed out by the review.

Some ELIPs receive exposure outside the development community prior to completion, and other ELIPs might not be completed at all. To avoid a situation where critical ELIP reviews may go unnoticed during this period, reviewers may, at their option, still post their review on the comments page, provided they first post it to the mailing list and plan to later remove or revise it as applicable based on the completed version. Such revisions should be made by editing the previous review and updating the timestamp. Reviews made prior to the complete version may be removed if they are no longer applicable and have not been updated in a timely manner (eg, within one month).

Pages must be named after the full ELIP number (eg, "ELIP 0001") and placed in the "Comments" namespace.
For example, the link for ELIP 1 will be https://github.com/ElementsProject/elips/wiki/Comments:ELIP-0001 .

Comments posted to this wiki should use the following format:

    <Your opinion> --<Your name>, <Date of posting, as YYYY-MM-DD>

ELIPs may also choose to list a second forum for ELIP comments, in addition to the ELIPs wiki.
In this case, the second forum's URI should be listed below the primary wiki's URI.

After some time, the ELIP itself may be updated with a summary tone of the comments.
Summary tones may be chosen from the following, but this ELIP does not intend to cover all possible nuances and other summaries may be used as needed:

* No comments yet.
* Unanimously Recommended for implementation
* Unanimously Discourage for implementation
* Mostly Recommended for implementation, with some Discouragement
* Mostly Discouraged for implementation, with some Recommendation

For example, see the preamble to this ELIP.

These fields must follow the "Discussions-To" header defined in ELIP 1 (if that header is not present, it should follow the position where it would be present; generally this is immediately above the Status header).

To avoid doubt: comments and status are unrelated metrics to judge a ELIP, and neither should be directly influencing the other.

===Rationale===

What is the purpose of ELIP comments?

* Various ELIPs have been adopted (the criteria required for "Final" Status) despite being considered generally inadvisable. Some presently regard ELIPs as a "good idea" simply by virtue of them being assigned a ELIP number. Due to the low barrier of entry for submission of new ELIPs, it seems advisable for a way for reviewers to express their opinions on them in a way that is consumable to the public without needing to review the entire development discussion.

Will ELIP comments be censored or limited to particular participants/"experts"?

* Participants should freely refrain from commenting outside of their area of knowledge or expertise. However, comments should not be censored, and participation should be open to the public.

==ELIP licensing==

===Specification===

New ELIPs may be accepted with the following licenses. Each new ELIP must identify at least one acceptable license in its preamble. The License header in the preamble must be placed after the Created header. Each license must be referenced by their respective abbreviation given below.

For example, a preamble might include the following License header:

    License: BSD-2-Clause
             GNU-All-Permissive

In this case, the ELIP text is fully licensed under both the OSI-approved BSD 2-clause license as well as the GNU All-Permissive License, and anyone may modify and redistribute the text provided they comply with the terms of *either* license. In other words, the license list is an "OR choice", not an "AND also" requirement.

It is also possible to license source code differently from the ELIP text. An optional License-Code header is placed after the License header. Again, each license must be referenced by their respective abbreviation given below.

For example, a preamble specifying the optional License-Code header might look like:

    License: BSD-2-Clause
             GNU-All-Permissive
    License-Code: GPL-2.0+

In this case, the code in the ELIP is not available under the BSD or All-Permissive licenses, but only under the terms of the GNU General Public License (GPL), version 2 or newer.
If the code were to be available under *only* version 2 exactly, the "+" symbol should be removed from the license abbreviation.
For a later version (eg, GPL 3.0), you would increase the version number (and retain or remove the "+" depending on intent).

    License-Code: GPL-2.0   # This refers to GPL v2.0 *only*, no later license versions are acceptable.
    License-Code: GPL-2.0+  # This refers to GPL v2.0 *or later*.
    License-Code: GPL-3.0   # This refers to GPL v3.0 *only*, no later license versions are acceptable.
    License-Code: GPL-3.0+  # This refers to GPL v3.0 *or later*.

In the event that the licensing for the text or code is too complicated to express with a simple list of alternatives, the list should instead be replaced with the single term "Complex". In all cases, details of the licensing terms must be provided in the Copyright section of the ELIP.

ELIPs are not required to be *exclusively* licensed under approved terms, and may also be licensed under unacceptable licenses *in addition to* at least one acceptable license.
In this case, only the acceptable license(s) should be listed in the License and License-Code headers.

====Recommended licenses====

* BSD-2-Clause: [https://opensource.org/licenses/BSD-2-Clause OSI-approved BSD 2-clause license]
* BSD-3-Clause: [https://opensource.org/licenses/BSD-3-Clause OSI-approved BSD 3-clause license]
* CC0-1.0: [https://creativecommons.org/publicdomain/zero/1.0/ Creative Commons CC0 1.0 Universal]
* GNU-All-Permissive: [http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html GNU All-Permissive License]

In addition, it is recommended that literal code included in the ELIP be dual-licensed under the same license terms as the project it modifies. For example, literal code intended for Elements Core would ideally be dual-licensed under the MIT license terms as well as one of the above with the rest of the ELIP text.

====Not recommended, but acceptable licenses====

* Apache-2.0: [http://www.apache.org/licenses/LICENSE-2.0 Apache License, version 2.0]
* BSL-1.0: [http://www.boost.org/LICENSE_1_0.txt Boost Software License, version 1.0]
* CC-BY-4.0: [https://creativecommons.org/licenses/by/4.0/ Creative Commons Attribution 4.0 International]
* CC-BY-SA-4.0: [https://creativecommons.org/licenses/by-sa/4.0/ Creative Commons Attribution-ShareAlike 4.0 International]
* MIT: [https://opensource.org/licenses/MIT Expat/MIT/X11 license]
* AGPL-3.0+: [http://www.gnu.org/licenses/agpl-3.0.en.html GNU Affero General Public License (AGPL), version 3 or newer]
* FDL-1.3: [http://www.gnu.org/licenses/fdl-1.3.en.html GNU Free Documentation License, version 1.3]
* GPL-2.0+: [http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html GNU General Public License (GPL), version 2 or newer]
* LGPL-2.1+: [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html GNU Lesser General Public License (LGPL), version 2.1 or newer]

====Not acceptable licenses====

All licenses not explicitly included in the above lists are not acceptable terms for a Elements Improvement Proposal unless a later ELIP extends this one to add them.
However, ELIPs predating the acceptance of this ELIP were allowed under other terms, and should use these abbreviation when no other license is granted:

* OPL: [http://opencontent.org/openpub/ Open Publication License, version 1.0]
* PD: Released into the public domain

===Rationale===

BIP 1 allowed the Open Publication License or releasing into the public domain; was this insufficient?

* The OPL is generally regarded as obsolete, and not a license suitable for new publications.
* Many are unfamiliar with the OPL terms, and may just prefer to use the public domain rather than license under uncertain terms.
* The OPL license terms allowed for the author to prevent publication and derived works, which was widely considered inappropriate for Elements standards.
* Public domain is not universally recognised as a legitimate action, thus it is inadvisable.

Why are there software licenses included?

* Some ELIPs, especially consensus layer, may include literal code in the ELIP itself which may not be available under the exact license terms of the ELIP.
* Despite this, not all software licenses would be acceptable for content included in ELIPs.

Why is Public Domain no longer acceptable for new ELIPs?

* In some jurisdictions, public domain is not recognised as a legitimate legal action, leaving the ELIP simply copyrighted with no redistribution or modification allowed at all.

==See Also==

* [https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki BIP 1: BIP Purpose and Guidelines]
* [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP 2: BIP Purpose and Guidelines]
* [https://github.com/bitcoin/bips/blob/master/bip-0123.mediawiki BIP 123: BIP Classification]
* [https://tools.ietf.org/html/rfc7282 RFC 7282: On Consensus and Humming in the IETF]
