<pre>
  ELIP: ????
  Layer: Wallet
  Title: CT Descriptors for Elements
  Author: Andrew Poelstra <apoelstra@blockstream.com>
          Tim Ruffing <crypto@timruffing.de>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/ElementsProject/elips/wiki/Comments:ELIP-????
  Status: Draft
  Type: Standards Track
  Created: 2022-10-06
  License: BSD-3-Clause
</pre>

==Introduction==

===Abstract===

This document proposes a new wrapper around existing and future Elements descriptor types, which allows attaching a confidential blinding key to an ordinary output script descriptor. It introduces new syntax to support both existing SLIP77-style confidential keys as well as a new, more flexible style.

===Copyright===

This document is licensed under the 3-clause BSD license.

===Motivation===

Confidential Transactions involve the use of uniformly random "blinding factors" associated to every confidential output.
These random values are secret, but must be known by the sender (in order to construct a transaction) as well as recipient (in order to recognize the received assets and amounts, and to spend the outputs).
This means they must be chosen by the sender of a transaction and somehow securely communicated to the recipient.

The way this is done is that confidential addresses contain the public key of an extra "blinding key" pair created by the recipient.
When blinding, the sender chooses a fresh EC Diffie-Hellman (ECDH) private key, encodes the corresponding public key in the "nonce" field of the transaction, derives an ECDH secret between the fresh private key and the public blinding key, uses the ECDH secret to encrypt the blinding factors for the output, and encodes the encrypted result in the rangeproof.
The recipient, when recognizing a scriptPubKey corresponding to the ordinary part of her confidential address, uses the private blinding key for that address in conjunction with the nonce field of the txout to re-derive the ECDH secret and decrypt the blinding factors.

This document defines a standard way for the recipient's wallet to compute blinding key pairs. There are a number of requirements:

* Confidential addresses, including their attached blinding key, should be derivable from a single descriptor without extra data
* Wallets should be able to choose the granularity of their blinding keys, so that the revelation of private blinding keys may unblind one, a subset, or all, of its blinded outputs
* In multiparty settings, each wallet should be able to restrict this granularity
* It should be possible somehow to do public derivation of CT addresses, given only a descriptor containing (extended) public keys

The current most popular scheme, [https://github.com/satoshilabs/slips/blob/master/slip-0077.md SLIP-77], does not satisfy any of these criteria, which limits its usefulness as we move toward a descriptor-centric setting in which multiparty addresses are common.

==Design==

===Overview===
We propose a new <code>ct</code> descriptor which wraps any other descriptor type in the form <code>ct(<BLINDING_KEY>, <DESCRIPTOR>)</code>.
Here <code>DESCRIPTOR</code> refers to any existing descriptor, e.g. <code>elwsh(...)</code> or <code>eltr(...)</code> and <code>BLINDING_KEY</code> is a new expression which must be one of
* <code>slip77(<64-character hex>)</code> which indicates that blinding keys for these addresses are derived via SLIP77; or
* <code><KEY></code> which is an ordinary (extended) public key; the blinding key is derived by a Taproot-style tweak of the key with the data of <code><DESCRIPTOR></code>.

In the <code><KEY></code> expression, all key(s) must be compressed; x-only and uncompressed keys are invalid.

It is permissible, and likely to be common, for a <code><KEY></code> key to be a private key (e.g. an xprv) even if the keys in the actual descriptor are public keys.
Such a descriptor is termed a '''view descriptor''', and the blinding private key a '''view key'''.

===Drawbacks===

* Because there is no sensible way to do multiparty unblinding, the blinding key must be a single key whose private half is known to all participants.
* The use of "view descriptors" which are nominally public but contain secret key data, may lead to user confusion; though we argue it has similar privacy properties to the chaincode value included in xpubs.
* Any party who has a copy of an addresses' view descriptor is able to see the blinding key and unblind coins sent to that address, or *any* derived address in the case of a descriptor containing wildcards.

The latter point is the intended use of view descriptors, and is listed as a drawback only because it may be surprising.

===Specification===

First, the <code>ct</code> descriptor is defined as above: its string serialization is given by <code>ct(<BLINDING_KEY>, <DESCRIPTOR>)</code> where <code>DESCRIPTOR</code> is the string serialization of an ordinary descriptor.
The <code>scriptPubKey</code> corresponding to a <code>ct</code> descriptor is that corresponding to the embedded <code>DESCRIPTOR</code>. The encoding and semantics of <code>BLINDING_KEY</code> are given below.

<code>BLINDING_KEY</code> expressions are one of
* '''slip77''', encoded as <code>slip77(<64-characters hex>)</code>, whose semantics are that the 64 hex characters are interpreted as the 32-byte <code>master_blinding_key</code> in SLIP77; the <code>scriptPubKey</code> for SLIP77 is computed as normal from the ordinary descriptor.
** These 32 bytes are the same for both public and private descriptors; they have no "public" equivalent.
** This mode is not recommended because there is no way to express this descriptor without revealing the SLIP77 key, which can be used to unblind every single output received by the wallet.
* '''bare key''', which simply encodes a single key in the same way as the keys in <code><DESCRIPTOR></code> are encoded. The blinding key is derived from the address by taking the public key ''K'' and tweaking it to form a new key ''K<sub>blind</sub>'' as follows:
** ''K' = K + H<sub>tag</sub>(K, <code>scriptPubKey</code>)'', where
** ''H<sub>tag</sub>'' is a [https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Design BIP-340 tagged hash] with tag <code>CT-Blinding-Key/1.0</code>;
** the comma indicates concatenation;
** and <code>scriptPubKey</code> is the scriptPubKey of the output, consensus-encoded including its length prefix.

Because the scriptPubKey is revealed on the blockchain, its role in the tagged hash is merely to ensure that blinding keys are not reused across multiple outputs, unless they are identical (in which case the reuse amounts to ordinary address reuse).
Privacy and security are provided by the untweaked key ''K'', which is never revealed on-chain.

In some circumstances, it may make sense for ''K'' to be derived deterministically from the descriptor data, rather than being chosen and specified separately.
This reduces implementation complexity and the need to store additional keys, at the cost of turning the descriptor unconditionally into a view descriptor.
In other words, users of this variant will be unable to provide external parties the ability to derive addresses without ''also'' providing them the ability to unblind coins.

In a future ELIP we will specify a standard deterministic key generation scheme for this case.

==Security==

==Backwards Compatibility==

Using the <code>ct(slip77(<64-byte hex>), <DESCRIPTOR>)</code> construction, any wallet should be able to express its existing confidential addresses using this new scheme.

==Acknowledgements==

We would like to thank Leo Comandini for describing practical requirements by wallet authors, and to Jonas Nick for providing feedback on the cryptographic design.

